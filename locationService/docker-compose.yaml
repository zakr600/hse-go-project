version: '3.1'
services:
  build:
    image: build:develop
    build:
      context: "."
      dockerfile: ".docker/build.Dockerfile"

  app:
    build:
      context: "."
      dockerfile: ".docker/run.Dockerfile"
    restart: unless-stopped
    depends_on:
      jaeger-all-in-one:
        condition: service_started
      build:
        condition: service_completed_successfully
      app_db:
        condition: service_healthy
    volumes:
      - './migrations/:/app/migrations/app'
    ports:
      - "8080:8080"
      - "1888:1888"   # pprof extension
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4317:4317"   # OTLP gRPC receiver
      - "55679:55679" # zpages extension
      - "9000:9000"
    networks:
      - db_network

  app_db:
    image: postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      PGUSER: usr
      POSTGRES_DB: locations_db
      POSTGRES_USER: usr
      POSTGRES_PASSWORD: locationspwd
    healthcheck:
      test: "pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER"
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - db_network

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9090:9090
    restart: unless-stopped
    volumes:
      - ./prometheus:/etc/prometheus
      - prom_data:/prometheus

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 8083:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
    volumes:
      - ./grafana:/etc/grafana/provisioning/datasources

  jaeger-all-in-one:
    image: jaegertracing/all-in-one:latest
    restart: always
    ports:
      - "8082:16686"
      - "14268"
      - "14250"
volumes:
  prom_data:
networks:
  db_network:
